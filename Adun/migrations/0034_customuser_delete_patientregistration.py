# Generated by Django 4.2.3 on 2023-08-25 21:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('Adun', '0033_rename_password1_patientregistration_comfirm_password_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50, null=True)),
                ('last_name', models.CharField(max_length=50)),
                ('password', models.CharField(max_length=30, null=True, unique=True)),
                ('comfirm_password', models.CharField(max_length=30, null=True, unique=True)),
                ('date_of_birth', models.DateField()),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.IntegerField()),
                ('gender', models.CharField(choices=[('girl', 'Female'), ('boy', 'Male')], max_length=4, null=True)),
                ('maritalstat', models.CharField(choices=[('gender', 'Gender'), ('single', 'Single'), ('married', 'Married'), ('divorce', 'Divorced')], max_length=10, null=True)),
                ('faculty', models.CharField(choices=[('fos', 'Faculty'), ('fos', 'Faculty of Science'), ('fams', 'Faculty of Arts and Management Science'), ('fol', 'Faculty of Law')], max_length=10, null=True)),
                ('department', models.CharField(choices=[('Dbfs', 'Department of Biology and Forensic Science'), ('Dcos', 'Department of Computing Science'), ('Dplp', 'Department of Public Law and Private Law'), ('Dabae', 'Department of Accounting/Business Administration/Economics'), ('Delhi', 'Department of English & Literary Studies/History & International Studies'), ('Dit', 'Department of International Relations/Hospitality & Tourism Studies')], max_length=10, null=True)),
                ('admission_number', models.CharField(max_length=20, null=True)),
                ('room_number', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(75)])),
                ('weight', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('height', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('allergies', models.TextField(null=True)),
                ('medical_condition', models.TextField(null=True)),
                ('taking_medications', models.BooleanField(null=True)),
                ('medications', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_set_for_group_%(app_label)s_%(class)s_last_name', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set_for_permission_%(app_label)s_%(class)s_last_name', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.DeleteModel(
            name='PatientRegistration',
        ),
    ]
